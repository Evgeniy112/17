# pars = {")": "(", "]": "["}
#
# def par_checker_mod(string):
#     stack = []
#
#     for s in string:
#         if s in "([":
#             stack.append(s)
#         elif s in ")]":
#             if len(stack) > 0 and stack[-1] == pars[s]:
#                 stack.pop()
#             else:
#                 return False
#     return len(stack) == 0
#
# print(par_checker_mod('(5+6)*(7+8)/(4+3)'))
# print(par_checker_mod('[2-3]'))

G = {"Адмиралтейская":
         {"Садовая": "4"},
     "Садовая":
         {"Адмиралтейская": "4",
          "Звенигородская": "5",
          "Сенная площадь": "3",
          "Спасская": "3"},
     "Звенигородская":
         {"Садовая": "5",
          "Пушкинская": "3"},
     "Сенная площадь":
         {"Садовая": "3",
          "Спасская": "3"},
     "Спасская":
         {"Садовая": "3",
          "Сенная площадь": "3",
          "Достоевская": "4"},
     "Достоевская":
         {"Спасская": "4",
          "Владимирская": "3"},
     "Владимирская":
         {"Достоевская": "3",
          "Пушкинская": "4"},
     "Пушкинская":
         {"Владимирская": "4",
          "Звенигородская": "3"}}

D = {k: 100 for k in G.keys()}# расстояния
start_k = "Адмиралтейская"# стартовая вершина
D[start_k] = 0 # расстояние от неё до самой себя равно нулю
U = {k : False for k in G.keys()} # флаги просмотра вершин
P = {k : None for k in G.keys()}

for _ in range(len(D)): #алгоритм Дейкстры выбор кратчайшего расстояния
    # выбираем среди непросмотренных наименьшее по расстоянию
    min_k = min([k for k in U.keys() if not U[k]], key = lambda x: D[x])

    for v in G[min_k].keys():# проходимся по всем смежным вершинам
        if int(D[v]) > int(D[min_k]) + int(G[min_k][v]):  # если расстояние от текущей вершины меньше
            D[v] = int(D[min_k]) + int(G[min_k][v])  # то фиксируем его
            P[v] = min_k  # и записываем как предок
    U[min_k] = True # просмотренную вершину помечаем

S = []
pointer = "Владимирская" # куда должны прийти
while pointer is not None: # перемещаемся, пока не придём в стартовую точку
    print(pointer)
    pointer = P[pointer]
    S.append(pointer)
print(S[::-1])


